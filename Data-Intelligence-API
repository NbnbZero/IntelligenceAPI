openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/mcculloh213/Data-Intelligence-API/1.0.0
info:
  description: 5915 Capstone Integration API
  version: "1.0.0"
  title: Data Intelligence Integration
  contact:
    email: pdevenpo@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
  - name: public
    description: public tag
  - name: private
    description: private tag
  - name: AIML
    description: AIML Routes
  - name: AR
    description: AR Routes
  - name: Cognitive Learning
    description: Cognitive Learning Routes
  - name: IoT Dashboard
    description: IoT Routes
  - name: Search
    description: Semantic Search Routes
  - name: SSL
    description: SSL Provisioning Routes
paths:
  /conversation/user:
    get:
      tags:
        - AIML
      summary: retrieves conversation thread by UserID
      operationId: searchUserID
      description: |
        By specifying a UserID, you can retreive their conversation thread with the ChatBot
      parameters:
        - in: query
          name: userId
          description: Id of the User we wish to retreive the Conversation Thread From
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/conversation'
        '400':
          description: bad input parameter
  /conversation/conversation:
    get:
      tags:
        - AIML
      summary: retrieves conversation thread by ConversationId
      operationId: searchConversationId
      description: |
        By specifying a UserID, you can retreive their conversation thread with the ChatBot
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/conversation'
        '400':
          description: bad input parameter
  /message:
    get:
      tags:
        - AIML
      summary: retrieves message from conversation
      operationId: searchUserID
      description: by specifying a message and conversation Id, it retrieves the message
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/conversation'
        '400':
          description: bad input parameter
  /conversation/remove:
    delete:
      tags:
        - AIML
      summary: Deletes a conversation thread
      description: Removes a specified conversation thread
      operationId: deleteThread
      responses:
        "400":
          description: Invalid conversation Id
      security:
        - user_auth:
            - "write:conversation"
            - "read:conversation"
  /message/remove:
    delete:
      tags:
        - AIML
      summary: Deletes a message from a Conversation 
      description: Removes a specified message from a specified thread
      operationId: deleteMessage
      responses:
        "400":
          description: Invalid conversation Id
      security:
        - user_auth:
            - "write:conversation"
            - "read:conversation"
  /message/hide:
    put:
      tags:
        - AIML
      summary: Hide conversation thread
      description: Logged in User may hide a conversation thread.
      operationId: hideThread
      responses:
        "400":
          description: Invalid conversation id supplied.
        "404":
          description: Conversation not found.
  /conversation/hide:
    put:
      tags:
        - AIML
      summary: Hide message in thread
      description: Logged in User may hide their message in a thread.
      operationId: hideThread
      responses:
        "400":
          description: Invalid message id supplied.
        "404":
          description: Message not found.
  /message/post:
    post:
      tags:
        - AIML
      summary: posts message to conversation thread
      operationId: postMessage
      description: posts a provided string message to the conversation thread
      responses:
        '201':
          description: message created
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversation'
        description: message to post
        
        
  /augmentedReality/pullImage:
    get:
      tags:
        - AR
      summary: Retreives an Image Set with Given Tag
      operationId: retrieveImageSet
      description: |
        By specifying a Image Tag, an Image Set will return.
      parameters:
        - in: query
          name: tag
          description: A tag string used to describe an image.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returning Image Object and Associated Tag
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/imageSet'
        '400':
          description: Bad Input
  /augmentedReality/pullModel:
    get:
      tags:
        - AR
      summary: Retreives an Associated Model with Given Tag
      operationId: retrieveAssociatedModel
      description: |
        By specifying a Tag, an Associated Model will return.
      parameters:
        - in: query
          name: tag
          description: A tag string used to describe an associated model.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returning Associated Model and Tag
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/associatedModel'
        '400':
          description: Bad Input.
          
  /augmentedReality/publishImage:
    post:
      tags:
        - AR
      summary: Posts an Image
      operationId: postImage
      description: Posts an Image to a database with a given Tag.
      parameters:
        - in: path
          name: image
          description: The Image to publish
          required: true
          schema:
            type: object
        - in: path
          name: tag
          description: Tag to associate image with
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Image and Tag created
        '204':
          description: Request Processed
        '400':
          description: 'Invalid input, image object invalid.'
        '401':
          description: 'Unauthorized to Publish Image.'
        '404':
          description: 'Requested Resource not Found.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imageSet'
        description: image to post
  /augmentedReality/publishModel:
    post:
      tags:
        - AR
      summary: Post an Associated Model.
      operationId: postAssociatedModel
      description: Posts an Associated Model to a Database with a given Tag.
      parameters:
        - in: path
          name: associatedModel
          description: The Associated Model to publish
          required: true
          schema:
            type: object
        - in: path
          name: tag
          description: Tag to associate Associated Model with
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Associated Model and Tag created
        '204':
          description: Request Processed
        '400':
          description: 'Invalid input, associated model invalid.'
        '401':
          description: 'Unauthorized to Publish Model.'
        '404':
          description: 'Requested Resource not Found.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/associatedModel'
        description: Associated Model to Post.
  /augmentedReality/updateModel:
    put:
      tags:
        - AR
      summary: Updates Associated Model
      description: User may make changes to Associated Model.
      operationId: updateAssociatedModel
      parameters:
        - in: path
          name: associatedModel
          description: The Associated Model to publish
          required: true
          schema:
            type: object
      responses:
        "400":
          description: 'Invalid Associated Model supplied.'
        "401":
          description: 'Unauthorized to update model.'
        "404":
          description: 'Associated Model not found.'
  /augmentedReality/removeImage:
    delete:
      tags:
        - AR
      summary: Deletes an Image 
      description: Removes a specified image from the Database
      operationId: deleteImage
      parameters:
        - in: path
          name: imageId
          description: The image ID associated with the image to delete.
          required: true
          schema:
            type: object
      responses:
        "400":
          description: "Invalid image Id"
        "401":
          description: "Unauthorized to Delete Image"
        "404":
          description: "Image not found."
      security:
        - user_auth:
            - "write:image"
            - "read:image"
  /augmentedReality/removeModel:
    delete:
      tags:
        - AR
      summary: Deletes an associated model.
      description: Removes a specified associated model.
      operationId: deleteAssociatedModel
      parameters:
        - in: path
          name: associatedModelId
          description: The associatedModelId tied to the model to delete.
          required: true
          schema:
            type: object
      responses:
        "400":
          description: 'Invalid associated model Id.'
        "401":
          description: 'Unauthorized to Delete Image.'
        "404":
          description: 'Associated Model Not Found.'
      security:
        - user_auth:
            - "write:image"
            - "read:image"
  /image:
    post:
      tags:
        - Cognitive Learning
      summary: posts image 
      operationId: postImage
      description: posts a provided image
      responses:
        '201':
          description: image created
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image'
        description: image to post
  /dashboardWidgets/userId:
    get:
      tags:
        - IoT 
      summary: retrieves list of Dashboard Widgets
      operationId: widgetsUser
      description: |
        By specifying a UserID, you can retreive their Dashboard Widgets
      parameters:
        - in: query
          name: getWidgetsUser
          description: pass an userId to retrieve their Dashboard Widgets
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schema/widgets'
        '400':
          description: bad input parameter
  /dashboardWidgets/widgetId:
    get:
      tags:
        - IoT 
      summary: retrieves a Dashboard Widget
      operationId: widgetsId
      description: |
        By specifying a widgetId, you can retreive the Dashboard Widget
      parameters:
        - in: query
          name: searchString
          description: pass a widgetId to retrieve the Dashboard Widget
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/widgets'
        '400':
          description: bad input parameter
  /dashboardWidget/post:
    post:
      tags:
        - IoT
      summary: Posts a Dashboard Widget 
      operationId: postWidget
      description: posts a provided Widget
      responses:
        '201':
          description: Widget created
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/widgets'
        description: Widget to post
  /dashboardWidget/update:
    put:
      tags:
        - IoT
      summary: Updates a DashBoard Widget 
      description: User may make changes to current Dashboard Widget
      operationId: updateWidget
      responses:
        "400":
          description: Invalid Widget supplied.
        "404":
          description: Widget not found.
  /dashboardWidget/delete:
    delete:
      tags:
        - IoT
      summary: Deletes an Dashboard Widget.
      description: Removes a specified Dashboard Widget.
      operationId: deleteDashboardWidget
      responses:
        "400":
          description: Invalid Dashboard Widget Id
      security:
        - user_auth:
            - "write:Widget"
            - "read:Widget"
  /search/get:
    get:
      tags:
        - Search
      summary: Performs Semantic Search
      operationId: search
      description: |
        Semantic Search a given file.
      parameters:
        - in: query
          name: searchFile
          description: pass the name of a PyText file for searching
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return fileID and fileName that are semantically searched
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/searchFile'
        '400':
          description: bad input parameter
          
  /search/post:
    post:
      tags:
        - Search
      summary: Uploads a Document
      operationId: postDocument
      description: Uploads a Document containing the Semantic Search Results
      responses:
        '201':
          description: Search Finished, Document Uploaded
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchFile'
        description: File to Search
        
  /ssl/retreive:
    get:
      tags:
        - SSL
      summary: Retrieves a SSL Certificate
      operationId: retrieveSSL
      description: |
        Provides a SSL Certificate
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/conversation'
        '400':
          description: bad input parameter
  /ssl/renew:
    put:
      tags:
        - SSL
      summary: Renews a SSL Certificate
      description: User may Renew SSL Certificate
      operationId: sslRenew
      responses:
        "400":
          description: Invalid SSL supplied.
        "404":
          description: SSL Cert not found.
components:
  schemas:
    conversation:
      required:
        - conversationId
        - date
        - users
      properties:
        conversationId:
          type: string
          example: ACME Corporation
        date:
          type: string
          example: 1-23-2020
        users:
          type: string
          example: ben
      type: object
    associatedModel:
      required:
        - modelId
        - modelName
      properties:
        modelId:
          type: string
          example: model123456
        modelName:
          type: string
          example: Blue Ball
      type: object
    image:
      required:
        - imageId
        - imageName
        - imageSetId
        - date
      properties:
        imageId:
          type: string
          example: image123456
        imageName:
          type: string
          example: pic_of_dog
        imageSetId:
          type: string
          example: imageSet123456
          description: the image set the image is a part of
        date:
          type: string
          example: 1-23-2020
      type: object
    imageSet:
      required:
        - imageSetId
        - imageSetName
      properties:
        imageSetId:
          type: string
          example: imageSet123456
        imageSetName:
          type: string
          example: pics_of_animals
      type: object
    searchFile:
      required:
        - searchFileID
        - searchFileName
      properties:
        searchFileID:
          type: string
          example: searchFile001
        searchFileName:
          type: string
          example: file_to_search
      type: object